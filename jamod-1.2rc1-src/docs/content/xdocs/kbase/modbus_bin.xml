<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "document-v12.dtd">
<document> 
  <header> 
    <title>Modbus BIN Specification</title>
    <version>1.2rc1 (09/11/2004)</version>
    <authors>
      <person name="Dieter Wimberger" email=" wimpi@users.sourceforge.net "/>
    </authors>
  </header> 
  <body>
    <section id="About">
      <title>About</title>
	  <p>
	    This document introduces a Modbus/BIN (serial) flavor which we have developed to
      overcome the problems of the RTU frames that are purely based on timings.
    </p>
	  <p>
	    We succeeded with a relatively simple design and implementation
	    and are convinced that a Modbus/BIN flavor is an interesting
	    approach for reducing the traffic overhead, achieving higher throughput performance
      than with the ASCII flavor but without the drawbacks of the RTU flavor.
	  </p>
    </section>
    <section>
      <title>Protocol &amp; Specification</title>
	  <p>
	    Basically the protocol specification for the RTU flavor is valid, except
      for the following two major differences:
	  </p>
    <ol>
      <li>Message frames have start and end tokens.</li>
      <li>Start and end token bytes are duplicated if they occur within a message.</li>
    </ol>
	  <p>
	    Both of these differences will be discussed in more detail in the following.
	  </p>
	  </section>
	  <section id="framing">
	    <title>Modbus/BIN Frames</title>
		  <p>
        Frames are transmitted binary to achieve a higher density. The error checksum
        is represented by a cyclic redundancy check (16 bit CRC; 2 byte) and appended
        to the message in the RTU order (low byte first). A message frame starts with
        a left/opening brace (<code>{</code>, ASCII Code: 123, hex 0x7B) and ends with
        a right/closing brace (<code>}</code>, ASCII Code: 125, 0x7D).
        Pauses between bytes can occur.
		</p>
		<p>
		  <em>Wait, the message might contain bytes with these values!</em><br/>
		  Right. That's why we have additionally established a rule for writing message bytes.
      Please see the next section.
		</p>
   </section>
    <section id="escaping">
      <title>Modbus/BIN byte transport rule</title>
      <p>
        Due to the fact that message bytes might have the value of the frame start
        and end tokens, we establish a very simple rule for transferring message
        bytes over a transport medium:<br/>
        <strong>If a byte with the value 123 (0x7B) or with the value 125 (0x7D) occurs
        it has to be duplicated (i.e. written twice).</strong>.
      </p>
      <p>
         This allows to distinguish between frame marker tokens and
         byte values when reading them from a transport medium, without much effort.
      </p>
      <p>
		    <em>Wait, this means you might as well end up with the length of messages in ASCII flavor!</em><br/>
        This is basically right, but very unlikely the case. We are convinced that we
        have probability on our side. If you consider that each byte value has the same
        probability you can calculate the density distribution for a specific message length
        and statistically speaking, the mean length will be below the length of the ASCII flavor
        message.
		  </p>
      <p>
		    <em>Wait, I don't believe the statistical crap!</em><br/>
		    <strong>Creationist, uh?</strong> Well, probably we convince you with these:
		  </p>
      <ol>
        <li>
          You don't need to worry about exact timing that much any longer. This is great
          at least if you don't have to cope with a strict hard real time world.
        </li>
        <li>
          You won't loose time or resources to encode bytes, neither when writing them (you just
          write the same byte once more) nor when reading them (you just check for the duplicates
          and skip them).
        </li>
      </ol>
      <p>
		  <em>I want to try this!</em><br/>
		  Right. That's why we have implemented it. All you need to do is to set the encoding parameter
      for the serial examples to <code>bin</code>. jamod will do the rest for you.
		  </p>
		<ul>
		  <li>
		    Modbus Serial Slave: <link href="../development/serial_slave_howto.html">Serial Slave How-To</link>
	      </li>
		  <li>
		    Modbus Serial Master: <link href="../development/serial_master_howto.html">Serial Master How-To</link>
	      </li>
		</ul>
		<p>
		  You are also more then welcome to check out the source code.
		</p>
    </section>

  </body>
</document>